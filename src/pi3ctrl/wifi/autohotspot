#!/bin/bash


function isRaspberryPi
{
#
# Check if device is a Raspberry Pi
#
    local pi=""
    if [ -f /proc/device-tree/model ];
    then
        pi=$( cat /proc/device-tree/model | tr '\0' '\n' | grep "Raspberry Pi" )
    fi
    if [ "x${pi}" == "x" ];
    then
        echo "Error: device is not a Raspberry Pi!"
        exit 1
    fi
}
isRaspberryPi


function isRoot
{
#
# Check if sudo mode is true
#
    if [ "$EUID" != "0" ];
    then
        echo "Error: should be run as root"
        exit 1
    fi
}
isRoot


wifidev="wlan0" #device name to use. Default is wlan0.
#use the command: iw dev, to see Wi-Fi interface name

createAdHocNetwork()
{
    source /tmp/pi3ctrl-autohotspot.env

    echo "Creating and activating AutoHotspot connection"
    # remove old connection
    if nmcli connection show | grep -w "$connection_name" > /dev/null; then
        sudo nmcli connection delete AutoHotspot
    fi
    # create new connection
    nmcli connection add type wifi ifname wlan0 con-name AutoHotspot autoconnect yes ssid "$SSID"
    nmcli connection modify AutoHotspot 802-11-wireless.mode ap 802-11-wireless.band bg ipv4.method shared
    nmcli connection modify AutoHotspot 802-11-wireless-security.key-mgmt wpa-psk
    nmcli connection modify AutoHotspot 802-11-wireless-security.proto rsn
    nmcli connection modify AutoHotspot 802-11-wireless-security.pairwise ccmp
    nmcli connection modify AutoHotspot 802-11-wireless-security.group ccmp
    nmcli connection modify AutoHotspot 802-11-wireless-security.psk "$PSK"
    # take connection online
    nmcli connection up AutoHotspot
}


killHotspot()
{
    if nmcli connection show --active | grep -w "$connection_name" > /dev/null; then
        echo "Shutting Down AutoHotspot"
        sudo nmcli connection down AutoHotspot
    else
        echo "AutoHotspot is not active"
    fi
}


chkWifiUp()
{
    echo "Checking Wi-Fi connection ok"
    killHotspot
    sleep 20 # Give time for connection to be completed to router
    if ! nmcli -f NAME,DEVICE con show --active | grep "$wifidev" >/dev/null 2>&1 ;
    then # Failed to connect to Wi-Fi (check your Wi-Fi settings, password etc)
        echo 'Wi-Fi failed to connect, falling back to Hotspot.'
        wpa_cli terminate "$wifidev" >/dev/null 2>&1
        createAdHocNetwork
    fi
}


chksys()
{
    # After some system updates hostapd gets masked using Raspbian Buster, and above.
    # This checks and fixes the issue and also checks dnsmasq is ok so the hotspot can be generated.
    # Check dnsmasq is disabled
    if systemctl -all list-unit-files dnsmasq.service | grep "dnsmasq.service masked" >/dev/null 2>&1;
    then
	systemctl unmask dnsmasq >/dev/null 2>&1
    fi
    if systemctl -all list-unit-files dnsmasq.service | grep "dnsmasq.service enabled" >/dev/null 2>&1;
    then
	systemctl disable dnsmasq >/dev/null 2>&1
	systemctl stop dnsmasq >/dev/null 2>&1
    fi
    # Make sure wlan is unblocked
    rfkill unblock wlan
}

chksys
chkWifiUp
