#!/bin/bash

##############################################################################
# Script Name   : autohotspot
# Description   : This script connects to a known wireless network if available,
#                 otherwise, it starts a local hotspot. The script is designed
#                 for systems using the Network Manager Command Line Interface (nmcli).
# Args          : [options]
# Author        : Pieter Smets
# Email         : mail@pietersmets.be
##############################################################################

# Default values
WLAN_DEV="wlan0" # Device name to use. Default is wlan0.
CONN_NAME="AutoHotspot" # Default connection name for the hotspot.

##############################################################################
# Function: usage
# Description: Displays usage information for the script.
##############################################################################
function usage
{
    local txt=(
"Autohotspot "
"Usage:"
"  $SCRIPT [options] <action>"
"Actions:"
"  install        Full installation of the Multi-Ear services:"
"                  * install Python3, dnsmasq, hostapd, nginx, influxdb, telegraf, grafana"
"                  * configure system services"
"                  * create Python3 virtual environment py37 in ~/.py37"
"                  * install and activate the Multi-EAR services"
"  configure      Configure the Multi-EAR services and dependencies."
"  check          Verify the installed Multi-EAR services and dependencies."
"  update         Update the existing Multi-EAR services and dependencies."
"  uninstall      Remove the installed Multi-EAR services, data, configurations and "
"                 the Python3 virtual environment."
"Options:"
"  --help, -h     Print help."
"  --version, -v  Print version."
""
"$SCRIPT only works with the Network Manager Command Line Interface (nmcli)."
    )

    printf "%s\n" "${txt[@]}"
    exit 0
}

##############################################################################
# Function: isRaspberryPi
# Description: Ensures the script is running on a Raspberry Pi.
##############################################################################
function isRaspberryPi {
    local pi=""
    if [ -f /proc/device-tree/model ];
    then
        pi=$( cat /proc/device-tree/model | tr '\0' '\n' | grep "Raspberry Pi" )
    fi
    if [ "x${pi}" == "x" ];
    then
        echo "Error: device is not a Raspberry Pi!"
        exit 1
    fi
}

##############################################################################
# Function: isRoot
# Description: Ensures the script is running with root privileges.
##############################################################################
function isRoot {
    if [ "$EUID" != "0" ]; then
        echo "Error: should be run as root"
        exit 1
    fi
}

##############################################################################
# Function: do_launchHotspot
# Description: Creates and activates a hotspot with the specified SSID and PSK.
##############################################################################
function do_launchHotspot {
    source /tmp/pi3ctrl-autohotspot.env

    do_killHotspot

    echo "Creating and activating $CONN_NAME connection"
    # Remove old connection
    if nmcli connection show | grep -w "$CONN_NAME" > /dev/null; then
        nmcli connection delete "$CONN_NAME"
    fi
    # Create new connection
    nmcli connection add type wifi ifname "$WLAN_DEV" con-name "$CONN_NAME" autoconnect yes ssid "$SSID"
    nmcli connection modify "$CONN_NAME" 802-11-wireless.mode ap 802-11-wireless.band bg ipv4.method shared
    nmcli connection modify "$CONN_NAME" 802-11-wireless-security.key-mgmt wpa-psk
    nmcli connection modify "$CONN_NAME" 802-11-wireless-security.proto rsn
    nmcli connection modify "$CONN_NAME" 802-11-wireless-security.pairwise ccmp
    nmcli connection modify "$CONN_NAME" 802-11-wireless-security.group ccmp
    nmcli connection modify "$CONN_NAME" 802-11-wireless-security.psk "$PSK"
    # Take connection online
    nmcli connection up "$CONN_NAME"
}

##############################################################################
# Function: do_killHotspot
# Description: Deactivates the currently active hotspot connection.
##############################################################################
function do_killHotspot {
    if nmcli connection show --active | grep -w "$CONN_NAME" > /dev/null; then
        echo "Connection $CONN_NAME currently active. Shutting down."
        nmcli connection down "$CONN_NAME"
    fi
}

##############################################################################
# Function: do_wificheck
# Description: Checks if the Wi-Fi connection is active. If not, it falls back
#              to starting the hotspot.
##############################################################################
function do_wificheck {
    do_systemcheck
    do_killHotspot
    echo "Checking Wi-Fi connection"
    sleep 20 # Give time for connection to complete to the router
    if ! nmcli -t -f NAME,DEVICE con show --active | grep "$WLAN_DEV" >/dev/null 2>&1; then
        echo "Wi-Fi failed to connect, falling back to $CONN_NAME."
        wpa_cli terminate "$WLAN_DEV" >/dev/null 2>&1
        do_launchHotspot
    else
        active=$(nmcli -t -f NAME,DEVICE con show --active | grep "$WLAN_DEV")
        echo "Connected to ${active%%:*}"
    fi
}

##############################################################################
# Function: do_systemcheck
# Description: Ensures the system is in a proper state to run the hotspot.
#              - Ensures the script is run as root.
#              - Checks and fixes issues with hostapd and dnsmasq services.
#              - Unblocks the WLAN device.
##############################################################################
function do_systemcheck {
    # Ensure user is root
    isRoot
    # Check and fix potential issues with dnsmasq and hostapd services
    if systemctl -all list-unit-files dnsmasq.service | grep "dnsmasq.service masked" >/dev/null 2>&1; then
        systemctl unmask dnsmasq >/dev/null 2>&1
    fi
    if systemctl -all list-unit-files dnsmasq.service | grep "dnsmasq.service enabled" >/dev/null 2>&1; then
        systemctl disable dnsmasq >/dev/null 2>&1
        systemctl stop dnsmasq >/dev/null 2>&1
    fi
    # Unblock WLAN
    rfkill unblock wlan
}


##############################################################################
# Function: do_forcehotspot
# Description: Forces the creation and activation of a hotspot.
##############################################################################
function do_forcehotspot {
    do_systemcheck
    do_launchHotspot
}

# Parse command line arguments
while getopts ":d:f:n:p:s:h" flag; do
    case "${flag}" in
        d) WLAN_DEV=${OPTARG};; # Set WLAN device
        f) 
            do_forcehotspot
            exit 0 ;;
        n) CONN_NAME=${OPTARG};; # Set connection name
        p) PSK=${OPTARG};; # Set connection PSK
        s) SSID=${OPTARG};; # Set connection SSID
        h) usage # Show help and exit
            exit 0 ;;
        \?) 
            echo "Invalid option: -$OPTARG" >&2
            usage
            exit 1 ;;
        :) 
            echo "Option -$OPTARG requires an argument." >&2
            usage
            exit 1 ;;
    esac
done

# Handle long options manually
shift $((OPTIND - 1))
while (( "$#" )); do
    case "$1" in
        --device)
            WLAN_DEV="$2"
            shift 2
            ;;
        --force)
            do_forcehotspot
            exit 0
            ;;
        --name)
            CONN_NAME="$2"
            shift 2
            ;;
        --psk)
            PSK="$2"
            shift 2
            ;;
        --ssid)
            SSID="$2"
            shift 2
            ;;
        --help)
            usage
            exit 0
            ;;
        --) # End of options
            shift
            break
            ;;
        -*|--*) # Unsupported flags
            echo "Error: Unsupported option $1" >&2
            usage
            exit 1
            ;;
        *) # Positional arguments
            break
            ;;
    esac
done

# Perform system check and Wi-Fi check
do_systemcheck
do_wificheck
exit 0
