#!/bin/bash
# version 0.961-N/HS

# You may share this script on the condition a reference to RaspberryConnect.com 
# must be included in copies or derivatives of this script. 

# A script to switch between a Wi-Fi network and a non internet routed Hotspot
# Works at startup or with a seperate timer or manually without a reboot
# Other setup required find out more at
# http://www.raspberryconnect.com

# https://www.raspberryconnect.com/projects/65-raspberrypi-hotspot-accesspoints/158-raspberry-pi-auto-wifi-hotspot-switch-direct-connection


function isRaspberryPi
{
#
# Check if device is a Raspberry Pi
#
    local pi=""
    if [ -f /proc/device-tree/model ];
    then
        pi=$( cat /proc/device-tree/model | tr '\0' '\n' | grep "Raspberry Pi" )
    fi
    if [ "x${pi}" == "x" ];
    then
        echo "Error: device is not a Raspberry Pi!"
        exit 1
    fi
}
isRaspberryPi


function isRoot
{
#
# Check if sudo mode is true
#
    if [ "$EUID" != "0" ];
    then
        echo "Error: should be run as root"
        exit 1
    fi
}
isRoot


wifidev="wlan0" #device name to use. Default is wlan0.
#use the command: iw dev ,to see Wi-Fi interface name 

IFSdef=$IFS
cnt=0
#These four lines capture the Wi-Fi networks the RPi is setup to use
wpassid=$(awk '/ssid="/{ print $0 }' /etc/wpa_supplicant/wpa_supplicant.conf | awk -F'ssid=' '{ print $2 }' | sed 's/\r//g'| awk 'BEGIN{ORS=","} {print}' | sed 's/\"/''/g' | sed 's/,$//')
IFS=","
ssids=($wpassid)
IFS=$IFSdef #reset back to defaults

#Note:If you only want to check for certain SSIDs
#Remove the # in in front of ssids=('mySSID1'.... below and put a # infront of all four lines above
# separated by a space, eg ('mySSID1' 'mySSID2')
#ssids=('mySSID1' 'mySSID2' 'mySSID3')

#Enter the Routers Mac Addresses for hidden SSIDs, seperated by spaces ie 
#( '11:22:33:44:55:66' 'aa:bb:cc:dd:ee:ff' ) 
mac=()

ssidsmac=("${ssids[@]}" "${mac[@]}") # combines ssid and MAC for checking


createAdHocNetwork()
{
    echo "Creating Hotspot"
    ip link set dev "$wifidev" down
    ip a add 192.168.128.1/24 brd + dev "$wifidev"
    ip link set dev "$wifidev" up
    dhcpcd -k "$wifidev" >/dev/null 2>&1
    systemctl start dnsmasq
    systemctl start hostapd
}


KillHotspot()
{
    echo "Shutting Down Hotspot"
    ip link set dev "$wifidev" down
    systemctl stop hostapd
    systemctl stop dnsmasq
    ip addr flush dev "$wifidev"
    ip link set dev "$wifidev" up
    dhcpcd  -n "$wifidev" >/dev/null 2>&1
}


ChkWifiUp()
{
    echo "Checking Wi-Fi connection ok"
    sleep 20 # Give time for connection to be completed to router
    if ! wpa_cli -i "$wifidev" status | grep 'ip_address' >/dev/null 2>&1 ;
    then # Failed to connect to Wi-Fi (check your Wi-Fi settings, password etc)
        echo 'Wi-Fi failed to connect, falling back to Hotspot.'
        wpa_cli terminate "$wifidev" >/dev/null 2>&1
        createAdHocNetwork
    fi
}


chksys()
{
    # After some system updates hostapd gets masked using Raspbian Buster, and above.
    # This checks and fixes the issue and also checks dnsmasq is ok so the hotspot can be generated.
    # Check Hostapd is unmasked and disabled
    if systemctl -all list-unit-files hostapd.service | grep "hostapd.service masked" >/dev/null 2>&1;
    then
        systemctl unmask hostapd.service >/dev/null 2>&1
    fi
    if systemctl -all list-unit-files hostapd.service | grep "hostapd.service enabled" >/dev/null 2>&1;
    then
	systemctl disable hostapd.service >/dev/null 2>&1
	systemctl stop hostapd >/dev/null 2>&1
    fi
    # Check dnsmasq is disabled
    if systemctl -all list-unit-files dnsmasq.service | grep "dnsmasq.service masked" >/dev/null 2>&1;
    then
	systemctl unmask dnsmasq >/dev/null 2>&1
    fi
    if systemctl -all list-unit-files dnsmasq.service | grep "dnsmasq.service enabled" >/dev/null 2>&1;
    then
	systemctl disable dnsmasq >/dev/null 2>&1
	systemctl stop dnsmasq >/dev/null 2>&1
    fi
}


FindSSID()
{
    # Check to see what SSID's and MAC addresses are in range
    ssidChk='NoSSID'
    local i=0
    local j=0

    # Wait for Wi-Fi if busy, usb Wi-Fi is slower.
    until [ $i -eq 1 ]
    do
        ssidreply=$((iw dev "$wifidev" scan ap-force | egrep "^BSS|SSID:") 2>&1) >/dev/null 2>&1 
        printf '%s\n' "${ssidreply[@]}"
        echo "Device available check attempt #$j"
        if (($j >= 10));
        then #if busy 10 times goto hotspot
            echo "Device busy or unavailable 10 times, going to Hotspot"
            ssidreply=""
            i=1
        elif echo "$ssidreply" | grep "No such device (-19)" >/dev/null 2>&1;
        then
            echo "No device reported, attempt #$j"
            NoDevice
        elif echo "$ssidreply" | grep "Network is down (-100)" >/dev/null 2>&1;
        then
            echo "Network not available, trying again"
            j=$((j + 1))
            sleep 2
        elif echo "$ssidreply" | grep "Read-only file system (-30)" >/dev/null 2>&1;
        then
            echo "Temporary read only file system, trying again"
            j=$((j + 1))
            sleep 2
        elif echo "$ssidreply" | grep "Invalid exchange (-52)" >/dev/null 2>&1;
        then
            echo "Temporary unavailable, trying again"
            j=$((j + 1))
            sleep 2
        elif echo "$ssidreply" | grep -v "resource busy (-16)"  >/dev/null 2>&1;
        then
            echo "Device Available, checking SSID results"
            i=1
        else # see if device not busy in 2 seconds
            echo "Device unavailable checking again, attempt #$j"
            j=$((j + 1))
            sleep 2
        fi
    done

    for ssid in "${ssidsmac[@]}"
    do
        if (echo "$ssidreply" | grep -F -- "$ssid") >/dev/null 2>&1;
        then
            # Valid SSID found, passing to script
            echo "SSID '$ssid' detected, assessing Wi-Fi status"
            ssidChk=$ssid
            return 0
        else
            # No Network found, NoSSID issued
            echo "SSID '$ssid' not found, assessing Wi-Fi status"
            ssidChk='NoSSID'
        fi
    done
}

NoDevice()
{
    #if no Wi-Fi device,ie usb Wi-Fi removed, activate Wi-Fi so when it is
    #reconnected Wi-Fi to a router will be available
    echo "No Wi-Fi device connected"
    wpa_supplicant -B -i "$wifidev" -c /etc/wpa_supplicant/wpa_supplicant.conf >/dev/null 2>&1
    exit 1
}

chksys
FindSSID

#Create Hotspot or connect to valid Wi-Fi networks
if [ "$ssidChk" != "NoSSID" ] 
then
    if systemctl status hostapd | grep "(running)" >/dev/null 2>&1;
    then #hotspot running and ssid in range
        KillHotspot
        echo "Hotspot Deactivated, Bringing Wi-Fi Up"
        wpa_supplicant -B -i "$wifidev" -c /etc/wpa_supplicant/wpa_supplicant.conf >/dev/null 2>&1
        ChkWifiUp
    elif { wpa_cli -i "$wifidev" status | grep 'ip_address'; } >/dev/null 2>&1;
    then #Already connected
        echo "Wi-Fi already connected to a network"
    else #ssid exists and no hotspot running connect to Wi-Fi network
        echo "Connecting to the Wi-Fi Network"
        wpa_supplicant -B -i "$wifidev" -c /etc/wpa_supplicant/wpa_supplicant.conf >/dev/null 2>&1
        ChkWifiUp
    fi
else #ssid or MAC address not in range
    if systemctl status hostapd | grep "(running)" >/dev/null 2>&1;
    then
        echo "Hostspot already active"
    elif { wpa_cli status | grep "$wifidev"; } >/dev/null 2>&1;
    then
        echo "Cleaning Wi-Fi files and activating Hotspot"
        wpa_cli terminate >/dev/null 2>&1
        ip addr flush "$wifidev"
        ip link set dev "$wifidev" down
        rm -r /var/run/wpa_supplicant >/dev/null 2>&1
        createAdHocNetwork
    else #"No SSID, activating Hotspot"
        createAdHocNetwork
    fi
fi
